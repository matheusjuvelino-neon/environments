# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'    
      - name: hello world
        run: |
          declare -A T
          INDEX=0

          for item in ./*/readme.md ./*/*/readme.md
          do 
            cur=${item///readme.md/}
            cur=${cur/.\//}

            T[$INDEX,0]=$cur
            T[$INDEX,1]='0'

            let INDEX=${INDEX}+1

          done


          for (( c=0; c<$INDEX; c++ ))
          do 
            srch="${T[$c,0]}"
            # echo "./${srch}/docker-compose.yml"
            if [ -f "./${srch}/docker-compose.yml" ]; then
              T[$c,1]='1'
            fi

          done


          docker_content=""
          podman_content=""

          for (( c=0; c<$INDEX; c++ ))
          do 
            # echo "${T[$c,1]}"
            if [ "${T[$c,1]}" == 1 ];then
              echo "${T[$c,0]} || docker"
              docker_content=("$docker_content\r\n\r\n - [${T[$c,0]}](./${T[$c,0]})")
            elif [ "${T[$c,1]}" == 0 ];then
              echo "${T[$c,0]} || podman"
              podman_content=("$podman_content\r\n\r\n - [${T[$c,0]}](./${T[$c,0]})")
            fi 
          done

          echo $docker_content
          template=`cat TEMPLATE.md`

          echo $template
          template=${template/\#Docker_Content\#/$docker_content}
          template=${template/\#Podman_Content\#/$podman_content}
          
          echo -e "$template" > README.md
      - name: update Readme
        uses: EndBug/add-and-commit@v7
        with:
          message: "Update readme.md"
          default_author: github_actions
          branch: master

